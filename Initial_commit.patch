Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/.gitignore	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,23 @@
+# IntelliJ project files
+.idea
+*.iml
+out
+gen
+build
+
+.gradle
+
+
+*.class
+*.log
+*.jar
+*.war
+*.nar
+*.ear
+*.zip
+*.tar.gz
+*.rar
+
+# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
+hs_err_pid*
+
Index: build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle.kts b/build.gradle.kts
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/build.gradle.kts	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,35 @@
+import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
+
+plugins {
+    kotlin("jvm") version "1.5.31"
+    application
+    kotlin("kapt") version "1.5.31"
+}
+
+group = "com.github.iamr3m"
+version = "1.0"
+
+repositories {
+    mavenCentral()
+}
+
+dependencies {
+    implementation("org.jsoup:jsoup:1.15.3")
+    implementation("com.googlecode.json-simple:json-simple:1.1.1")
+    implementation("info.picocli:picocli:4.7.0")
+    kapt("info.picocli:picocli-codegen:4.7.0")
+
+    testImplementation(kotlin("test"))
+}
+
+tasks.test {
+    useJUnit()
+}
+
+tasks.withType<KotlinCompile> {
+    kotlinOptions.jvmTarget = "1.8"
+}
+
+application {
+    mainClass.set("MainKt")
+}
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/gradle.properties	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,1 @@
+kotlin.code.style=official
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/gradle/wrapper/gradle-wrapper.properties	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,5 @@
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.1-bin.zip
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
Index: gradlew
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew b/gradlew
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/gradlew	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,185 @@
+#!/usr/bin/env sh
+
+#
+# Copyright 2015 the original author or authors.
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#      https://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn () {
+    echo "$*"
+}
+
+die () {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+nonstop=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MSYS* | MINGW* )
+    msys=true
+    ;;
+  NONSTOP* )
+    nonstop=true
+    ;;
+esac
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin or MSYS, switch paths to Windows format before running java
+if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=`expr $i + 1`
+    done
+    case $i in
+        0) set -- ;;
+        1) set -- "$args0" ;;
+        2) set -- "$args0" "$args1" ;;
+        3) set -- "$args0" "$args1" "$args2" ;;
+        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Escape application args
+save () {
+    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
+    echo " "
+}
+APP_ARGS=`save "$@"`
+
+# Collect all arguments for the java command, following the shell quoting and substitution rules
+eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"
+
+exec "$JAVACMD" "$@"
Index: gradlew.bat
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/gradlew.bat	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,89 @@
+@rem
+@rem Copyright 2015 the original author or authors.
+@rem
+@rem Licensed under the Apache License, Version 2.0 (the "License");
+@rem you may not use this file except in compliance with the License.
+@rem You may obtain a copy of the License at
+@rem
+@rem      https://www.apache.org/licenses/LICENSE-2.0
+@rem
+@rem Unless required by applicable law or agreed to in writing, software
+@rem distributed under the License is distributed on an "AS IS" BASIS,
+@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+@rem See the License for the specific language governing permissions and
+@rem limitations under the License.
+@rem
+
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Resolve any "." and ".." in APP_HOME to make it shorter.
+for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto execute
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
Index: settings.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/settings.gradle.kts b/settings.gradle.kts
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/settings.gradle.kts	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,3 @@
+
+rootProject.name = "k-wordle-solver"
+
Index: src/main/kotlin/LangCandidates.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/LangCandidates.kt b/src/main/kotlin/LangCandidates.kt
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/src/main/kotlin/LangCandidates.kt	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,1 @@
+class LangCandidates : ArrayList<String>(listOf("by", "en", "ru"))
Index: src/main/kotlin/Load.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/Load.kt b/src/main/kotlin/Load.kt
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/src/main/kotlin/Load.kt	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,24 @@
+import picocli.CommandLine.Command
+import picocli.CommandLine.Option
+
+@Command(
+    name = "load",
+    description = ["Load words from web"],
+    sortOptions = false,
+    version = ["1.0.0"],
+    mixinStandardHelpOptions = true
+)
+class Load : Runnable {
+    @Option(
+        names = ["-l", "--lang"],
+        required = true,
+        completionCandidates = LangCandidates::class,
+        description = ["2-letter language code. Candidates: \${COMPLETION-CANDIDATES}"]
+    )
+    lateinit var lang: String
+
+    override fun run() {
+        val wordsLoader = WordsLoader()
+        wordsLoader.load(lang)
+    }
+}
Index: src/main/kotlin/Main.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/Main.kt b/src/main/kotlin/Main.kt
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/src/main/kotlin/Main.kt	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,19 @@
+import picocli.CommandLine
+import picocli.CommandLine.*
+import kotlin.system.exitProcess
+
+@Command(
+    name = "wordle-solver",
+    subcommands = [Solve::class, Load::class],
+    version = ["1.0.0"],
+    mixinStandardHelpOptions = true
+)
+class Main {
+    @Spec
+    lateinit var spec: Model.CommandSpec
+}
+
+fun main(args: Array<String>) {
+    val exitCode = CommandLine(Main()).execute(*args)
+    exitProcess(exitCode)
+}
Index: src/main/kotlin/Printer.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/Printer.kt b/src/main/kotlin/Printer.kt
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/src/main/kotlin/Printer.kt	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,58 @@
+fun printInput(
+    lang: String,
+    include: List<Char>,
+    exclude: List<Char>,
+    char1: Char?,
+    char2: Char?,
+    char3: Char?,
+    char4: Char?,
+    char5: Char?,
+    not1: List<Char>,
+    not2: List<Char>,
+    not3: List<Char>,
+    not4: List<Char>,
+    not5: List<Char>,
+) {
+    println("${COLOR_BLUE}Input: {")
+    println("  lang:$COLOR_RESET $lang")
+    if (include.isNotEmpty()) println("$COLOR_BLUE  Included chars:$COLOR_RESET $include")
+    if (exclude.isNotEmpty()) println("$COLOR_BLUE  Excluded chars:$COLOR_RESET $include")
+    if (char1 != null) println("$COLOR_BLUE  Char1:$COLOR_RESET $char1")
+    if (char2 != null) println("$COLOR_BLUE  Char1:$COLOR_RESET $char2")
+    if (char3 != null) println("$COLOR_BLUE  Char1:$COLOR_RESET $char3")
+    if (char4 != null) println("$COLOR_BLUE  Char1:$COLOR_RESET $char4")
+    if (char5 != null) println("$COLOR_BLUE  Char1:$COLOR_RESET $char5")
+    if (not1.isNotEmpty()) println("$COLOR_BLUE  Chars not in 1st position:$COLOR_RESET $not1")
+    if (not2.isNotEmpty()) println("$COLOR_BLUE  Chars not in 2nd position:$COLOR_RESET $not2")
+    if (not3.isNotEmpty()) println("$COLOR_BLUE  Chars not in 3rd position:$COLOR_RESET $not3")
+    if (not4.isNotEmpty()) println("$COLOR_BLUE  Chars not in 4th position:$COLOR_RESET $not4")
+    if (not5.isNotEmpty()) println("$COLOR_BLUE  Chars not in 5th position:$COLOR_RESET $not5")
+    println("${COLOR_BLUE}}$COLOR_RESET\n")
+}
+
+fun printList(list: List<String>) {
+    if (list.isEmpty()) {
+        return println("${COLOR_RED}No matched words found$COLOR_RESET")
+    }
+    println("${COLOR_BLUE}Matched words: [$COLOR_RESET")
+    val chunked = list.chunked(PRINT_SIZE_COLUMNS)
+    val printSize = Integer.min(PRINT_SIZE_ROWS - 1, chunked.size - 1)
+    for (i in 0..printSize) {
+        val row = chunked[i].joinToString(", ")
+        if (i == printSize) print(row) else println(row)
+    }
+    if (chunked.size > PRINT_SIZE_ROWS) {
+        val moreItemsCount = list.size - (PRINT_SIZE_ROWS * PRINT_SIZE_COLUMNS)
+        println(" ...\n$COLOR_BLUE] $moreItemsCount more items$COLOR_RESET")
+    } else println("\n${COLOR_BLUE}]$COLOR_RESET")
+}
+
+// Everything after this is in red
+private const val COLOR_RED = "\u001b[31m"
+// Everything after this is in blue
+private const val COLOR_BLUE = "\u001b[34m"
+// Resets previous color codes
+private const val COLOR_RESET = "\u001b[0m"
+
+private const val PRINT_SIZE_COLUMNS = 7
+private const val PRINT_SIZE_ROWS = 9
Index: src/main/kotlin/Solve.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/Solve.kt b/src/main/kotlin/Solve.kt
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/src/main/kotlin/Solve.kt	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,82 @@
+import picocli.CommandLine.Command
+import picocli.CommandLine.Option
+
+@Command(
+    name = "solve",
+    description = ["Solve"],
+    sortOptions = false,
+    version = ["1.0.0"],
+    mixinStandardHelpOptions = true
+)
+class Solve : Runnable {
+    @Option(
+        names = ["-l", "--lang"],
+        required = true,
+        completionCandidates = LangCandidates::class,
+        description = ["2-letter language code. Candidates: \${COMPLETION-CANDIDATES}"]
+    )
+    lateinit var lang: String
+
+    @Option(names = ["-i", "--include"], split = ",", description = ["Included chars"])
+    val include: List<Char> = listOf()
+
+    @Option(names = ["-e", "--exclude"], split = ",", description = ["Excluded chars"])
+    val exclude: List<Char> = listOf()
+
+    @Option(names = ["-c1", "--char1"], description = ["Known char 1"])
+    var char1: Char? = null
+
+    @Option(names = ["-c2", "--char2"], description = ["Known char 2"])
+    var char2: Char? = null
+
+    @Option(names = ["-c3", "--char3"], description = ["Known char 3"])
+    var char3: Char? = null
+
+    @Option(names = ["-c4", "--char4"], description = ["Known char 4"])
+    var char4: Char? = null
+
+    @Option(names = ["-c5", "--char5"], description = ["Known char 5"])
+    var char5: Char? = null
+
+    @Option(names = ["-n1", "--not1"], split = ",", description = ["Chars not in 1st position"])
+    val not1: List<Char> = listOf()
+
+    @Option(names = ["-n2", "--not2"], split = ",", description = ["Chars not in 2nd position"])
+    val not2: List<Char> = listOf()
+
+    @Option(names = ["-n3", "--not3"], split = ",", description = ["Chars not in 3rd position"])
+    val not3: List<Char> = listOf()
+
+    @Option(names = ["-n4", "--not4"], split = ",", description = ["Chars not in 4th position"])
+    val not4: List<Char> = listOf()
+
+    @Option(names = ["-n5", "--not5"], split = ",", description = ["Chars not in 5th position"])
+    val not5: List<Char> = listOf()
+
+    override fun run() {
+        printInput(
+            lang, include, exclude,
+            char1, char2, char3, char4, char5,
+            not1, not2, not3, not4, not5
+        )
+        val wordsLoader = WordsLoader()
+        wordsLoader.init(lang)
+        val matchedWords = wordsLoader.getWords(lang)!!
+            .asSequence()
+            .filter { w -> include.all { w.contains(it) } }
+            .filter { w -> exclude.any { w.contains(it) }.not() }
+            .filter { w -> char1?.let { w[0] == it } ?: true }
+            .filter { w -> char2?.let { w[1] == it } ?: true }
+            .filter { w -> char3?.let { w[2] == it } ?: true }
+            .filter { w -> char4?.let { w[3] == it } ?: true }
+            .filter { w -> char5?.let { w[4] == it } ?: true }
+            .filter { w -> not1.any { w[0] == it }.not() }
+            .filter { w -> not2.any { w[1] == it }.not() }
+            .filter { w -> not3.any { w[2] == it }.not() }
+            .filter { w -> not4.any { w[3] == it }.not() }
+            .filter { w -> not5.any { w[4] == it }.not() }
+            .toList()
+            .shuffled()
+        printList(matchedWords)
+    }
+}
Index: src/main/kotlin/WordsLoader.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/kotlin/WordsLoader.kt b/src/main/kotlin/WordsLoader.kt
new file mode 100644
--- /dev/null	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
+++ b/src/main/kotlin/WordsLoader.kt	(revision 504c186c8acaa01719b61090a9971bfb35f226ac)
@@ -0,0 +1,151 @@
+import org.json.simple.JSONArray
+import org.json.simple.parser.JSONParser
+import org.jsoup.Jsoup
+import java.io.*
+import java.net.HttpURLConnection
+import java.net.URL
+import java.time.LocalDate
+import java.time.LocalDateTime
+import java.time.Period
+import java.time.ZoneOffset
+import java.util.zip.ZipEntry
+import java.util.zip.ZipInputStream
+import java.util.zip.ZipOutputStream
+import kotlin.math.floor
+
+
+class WordsLoader {
+
+    data class Words(
+        val meta: HashMap<String, Long> = hashMapOf(),
+        val dict: HashMap<String, List<String>> = hashMapOf()
+    ) : Serializable
+
+    private var words = Words()
+
+    fun init(lang: String) {
+        if (!checkLangAndLoad(lang)) {
+            println("Dictionary $lang is missing or outdated. Downloading...")
+            load(lang)
+        } else {
+            loadFile()
+        }
+    }
+
+    fun load(lang: String) {
+        when (lang) {
+            "by" -> loadBy()
+            "ru" -> loadRu()
+            "en" -> loadEn()
+        }
+        words.meta[lang] = LocalDateTime.now().toEpochSecond(ZoneOffset.UTC)
+        writeFile()
+        println("Done!\n")
+    }
+
+    fun getWords(lang: String): List<String>? = words.dict[lang]
+
+    private fun diffDays(date: Long): Int = Period.between(LocalDate.ofEpochDay(date), LocalDate.now()).days
+
+    private fun checkLangAndLoad(lang: String): Boolean {
+        if (fileExists()) {
+            loadFile()
+            if (getWords(lang)?.isNotEmpty() == true && words.meta.containsKey(lang)) return diffDays(words.meta[lang]!!) < 30
+        }
+        return false
+    }
+
+    private fun fileExists(): Boolean = File(ZIP_FILE_NAME).exists()
+
+    private fun loadFile() {
+        FileInputStream(ZIP_FILE_NAME).use { fis ->
+            ZipInputStream(fis).use { zis ->
+                zis.nextEntry
+                ObjectInputStream(zis).use {
+                    words = it.readObject() as Words
+                }
+            }
+        }
+    }
+
+    private fun writeFile() {
+        FileOutputStream(ZIP_FILE_NAME).use { fos ->
+            ZipOutputStream(fos).use { zos ->
+                zos.putNextEntry(ZipEntry(WORDS_FILE_NAME))
+                ObjectOutputStream(zos).use { oos ->
+                    oos.writeObject(words)
+                }
+            }
+        }
+    }
+
+    private fun loadBy() {
+        val by = mutableListOf<String>()
+        BY_ALPHABET.forEach {
+            print("\rReceiving words: ${floor((BY_ALPHABET.indexOf(it).toDouble() / BY_ALPHABET.size * 100)).toInt()}%")
+            val document = Jsoup.connect(BASE_BY_URL + it).get()
+            document
+                .select(".container-fluid .span8 .row-fluid .span10 ul.unstyled li a")
+                .forEach { el ->
+                    val word = el.text().lowercase()
+                    if (word.length == 5 && word.contains("-").not()) by.add(word)
+                }
+        }
+        print("\b\b\b100%\n")
+        if (fileExists()) loadFile()
+        words.dict["by"] = by
+    }
+
+    private fun loadRu() {
+        println("Receiving words...")
+        if (fileExists()) loadFile()
+        words.dict["ru"] = parseRuEnDict(requestUrl(RU_URL))
+    }
+
+    private fun loadEn() {
+        println("Receiving words...")
+        if (fileExists()) loadFile()
+        words.dict["en"] = parseRuEnDict(requestUrl(EN_URL))
+    }
+
+    private fun parseRuEnDict(data: String): List<String> {
+        val subData = data.split("nouns'] = ")[1].replace("'", "\"")
+        val size = subData.length
+        val array = JSONParser().parse(subData.substring(0, size - 3) + "]") as JSONArray
+        val filteredArray = mutableListOf<String>()
+        for (i in array.indices) {
+            val str = array[i] as String
+            if (str.length == 5 && str.contains("-").not()) filteredArray.add(str)
+        }
+        return filteredArray
+    }
+
+    private fun requestUrl(urlString: String): String {
+        val url = URL(urlString)
+        val con = url.openConnection() as HttpURLConnection
+        con.requestMethod = "GET"
+
+        val bufferedReader = BufferedReader(InputStreamReader(con.inputStream))
+        var inputLine: String?
+        val content = StringBuffer()
+        while (bufferedReader.readLine().also { inputLine = it } != null) {
+            content.append(inputLine)
+        }
+        bufferedReader.close()
+        con.disconnect()
+        return content.toString()
+
+    }
+
+    private companion object {
+        const val ZIP_FILE_NAME = "words.zip"
+        const val WORDS_FILE_NAME = "words"
+        const val RU_URL = "https://sanstv.ru/words/dict_ru_nouns.js"
+        const val EN_URL = "https://sanstv.ru/words/dict_en_nouns.js"
+        const val BASE_BY_URL = "https://www.skarnik.by/litara/"
+        val BY_ALPHABET = listOf(
+            "А", "Б", "В", "Г", "Д", "Е", "Ё", "Ж", "З", "І", "Й", "К", "Л", "М", "Н",
+            "О", "П", "Р", "С", "Т", "У", "Ф", "Х", "Ц", "Ч", "Ш", "Э", "Ю", "Я"
+        )
+    }
+}
